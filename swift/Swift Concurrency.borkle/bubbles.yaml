- ID: 1
  text: ASYNC CAFE
  fillColorRGB:
    red: 8.93993e-1
    green: 9.92872e-1
    blue: 1e+0
  formattingOptions:
  - options: 1
    rangeStart: 0
    rangeLength: 10
  position:
  - 3.64475906905595e+2
  - 8.1904611013986e+1
  width: 1.6e+2
  connections:
    indexes:
    - location: 2
      length: 2
  _effectiveHeight: 1.4e+1
- ID: 2
  text: Dan Steinberg
  formattingOptions: []
  position:
  - 5.30899857954546e+2
  - 6.95490056818182e+1
  width: 9e+1
  connections:
    indexes:
    - location: 1
      length: 1
    - location: 54
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 3
  text: https://editorscut.gumroad.com/l/async
  formattingOptions: []
  position:
  - 3.77548951048951e+2
  - 2.89639969405594e+1
  width: 2.2e+2
  connections:
    indexes:
    - location: 1
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 4
  text: Basic elements
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 4.33075475305944e+2
  - 4.60818536931818e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 5
      length: 3
    - location: 35
      length: 1
    - location: 63
      length: 1
    - location: 67
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 5
  text: async
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 5.36212357954545e+2
  - 7.01365056818182e+2
  width: 7e+1
  connections:
    indexes:
    - location: 4
      length: 1
    - location: 17
      length: 1
    - location: 29
      length: 1
    - location: 40
      length: 2
    - location: 47
      length: 1
    - location: 60
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 6
  text: await
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 6.44453125e+2
  - 5.31063920454545e+2
  width: 7e+1
  connections:
    indexes:
    - location: 4
      length: 1
    - location: 18
      length: 1
    - location: 29
      length: 2
    - location: 32
      length: 1
    - location: 42
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 7
  text: Task
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.83192471590909e+2
  - 3.67672585227273e+2
  width: 7e+1
  connections:
    indexes:
    - location: 4
      length: 1
    - location: 43
      length: 3
    - location: 55
      length: 1
    - location: 125
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 8
  text: Mechanisms
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 3.63535292832156e+2
  - 1.12254365166085e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 9
      length: 1
    - location: 19
      length: 1
    - location: 74
      length: 1
    - location: 78
      length: 1
    - location: 83
      length: 1
    - location: 92
      length: 1
    - location: 97
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 9
  text: Checked Continuations
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 5.46891116695796e+2
  - 1.19853796984267e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 8
      length: 1
    - location: 21
      length: 1
    - location: 79
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 10
  text: More than one result over time
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 1.22225040974649e+3
  - 3.93297530594404e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 11
      length: 2
    - location: 23
      length: 1
    - location: 100
      length: 1
    - location: 102
      length: 1
    - location: 106
      length: 1
    - location: 120
      length: 2
    - location: 145
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 11
  text: AsyncSequence
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.10134159200173e+3
  - 3.21865329982517e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 12
      length: 1
    - location: 99
      length: 1
    - location: 113
      length: 2
    - location: 119
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 12
  text: AsyncStream<T>
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.20378723229894e+3
  - 5.41958752185314e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 10
      length: 2
    - location: 98
      length: 1
    - location: 108
      length: 4
  _effectiveHeight: 1.4e+1
- ID: 13
  text: 'Structured Concurrency: Start tasks and synchronize later one'
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 2.11144981971165e+3
  - 1.48473229895103e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 14
      length: 1
    - location: 24
      length: 1
    - location: 171
      length: 1
    - location: 182
      length: 2
    - location: 195
      length: 1
    - location: 204
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 14
  text: async let
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.38063906796339e+3
  - 1.61825502622376e+2
  width: 9e+1
  connections:
    indexes:
    - location: 13
      length: 1
    - location: 25
      length: 1
    - location: 186
      length: 1
    - location: 189
      length: 1
    - location: 203
      length: 1
    - location: 211
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 16
  text: Actors
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 3.15037601070804e+3
  - 1.82853146853156e+2
  width: 6e+1
  connections:
    indexes:
    - location: 28
      length: 1
    - location: 48
      length: 2
    - location: 51
      length: 1
    - location: 91
      length: 1
    - location: 126
      length: 1
    - location: 128
      length: 1
    - location: 136
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 17
  text: Indicates a method can suspend, so the app isn't blocked by long-running work.  we
    can do the work and come back later.
  formattingOptions: []
  position:
  - 4.60340909090909e+2
  - 5.28187500000004e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 5
      length: 1
  _effectiveHeight: 7e+1
- ID: 18
  text: point to a possible suspension point
  formattingOptions: []
  position:
  - 5.41246448863636e+2
  - 4.15936079545459e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 6
      length: 1
    - location: 31
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 19
  text: Continuations
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.62295946241246e+2
  - 1.13948967438812e+3
  width: 9e+1
  connections:
    indexes:
    - location: 8
      length: 1
    - location: 20
      length: 1
    - location: 75
      length: 3
    - location: 80
      length: 3
  _effectiveHeight: 1.4e+1
- ID: 20
  text: Wrap delegate and callback closures
  formattingOptions: []
  position:
  - 1.50644667832156e+2
  - 1.06966723120631e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 21
  text: a promise that async methods use to return a value in the future
  formattingOptions: []
  position:
  - 5.61468531468516e+2
  - 1.11065799825176e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 9
      length: 1
    - location: 22
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 22
  text: enforce returning exactly once
  formattingOptions: []
  position:
  - 5.62690122377606e+2
  - 1.02581424825176e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 21
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 23
  text: getting a sequence of esponses as they become available
  formattingOptions: []
  position:
  - 1.19332394558565e+3
  - 2.39396197552445e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 10
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 24
  text: take the results of more than one asynchronous task and combine them
  formattingOptions: []
  position:
  - 1.92914868334801e+3
  - 8.51903409090862e+1
  width: 1.6e+2
  connections:
    indexes:
    - location: 13
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 25
  text: '"we use async let for structured concurrency"'
  formattingOptions: []
  position:
  - 2.2270805561627e+3
  - 2.07875819493003e+2
  width: 1e+2
  connections:
    indexes:
    - location: 14
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 26
  text: for when we don't know how many child tasks we're going to want to spawn
  formattingOptions: []
  position:
  - 2.08926778299837e+3
  - 5.51436516608389e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 183
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 27
  text: can cancel a parent task and the child tasks get cancelled as well
  formattingOptions: []
  position:
  - 2.0380065832606e+3
  - 6.26179468968529e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 183
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 28
  text: Protect shared mutable state from being accessed from multiple threads
  formattingOptions: []
  position:
  - 3.21083519995629e+3
  - 3.17545290646854e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 16
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 29
  text: built around tasks and functions that can suspend and resume
  formattingOptions: []
  position:
  - 5.66526988636365e+2
  - 6.35048295454543e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 5
      length: 2
    - location: 58
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 30
  text: required when calling an async method. indicates that we know that this can
    result in execution being suspended
  formattingOptions: []
  position:
  - 7.97666903409092e+2
  - 6.8051349431818e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 6
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 31
  text: think about what else can happen while this is suspended
  formattingOptions: []
  position:
  - 6.99257812500001e+2
  - 4.11049715909089e+2
  width: 1.4e+2
  connections:
    indexes:
    - location: 18
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 32
  text: can only be used in an async context
  formattingOptions: []
  position:
  - 7.34524147727274e+2
  - 5.38709517045452e+2
  width: 1.3e+2
  connections:
    indexes:
    - location: 6
      length: 1
    - location: 33
      length: 2
  _effectiveHeight: 2.8e+1
- ID: 33
  text: in an async method
  formattingOptions: []
  position:
  - 6.87436079545456e+2
  - 5.91834517045452e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 32
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 34
  text: or in a closure passed to a Task
  formattingOptions: []
  position:
  - 7.43480113636365e+2
  - 6.26369318181816e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 32
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 35
  text: parallels between throws/try/do catch  and async/await/Task
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 4.28895050262238e+2
  - 2.43310697115383e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 4
      length: 1
    - location: 36
      length: 4
  _effectiveHeight: 4.2e+1
- ID: 36
  text: we have to try even if a throwing method doesn't actually throw
  formattingOptions: []
  position:
  - 3.01541193181819e+2
  - 1.64661221590907e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 35
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 37
  text: '*can* throw - so the method could result in an error, or result in something
    being returned'
  formattingOptions: []
  position:
  - 4.85546875000001e+2
  - 1.53780539772725e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 35
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 38
  text: do catch wraps error throwing code up in a box that hides the error from an
    error-free world
  formattingOptions: []
  position:
  - 6.65042613636365e+2
  - 1.77122159090907e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 35
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 39
  text: 'Summary:

    - mark methods that can throw with throws

    - if call one, must use try to signal we know we''re calling something that can
    throw

    - if we call with try, either handle or mark with throws

    - we handle a call to a method that throws by enclosing try in a do block and
    handling error in a catch'
  formattingOptions: []
  position:
  - 6.17073863636365e+2
  - 2.49977272727271e+2
  width: 2.8e+2
  connections:
    indexes:
    - location: 35
      length: 1
  _effectiveHeight: 1.26e+2
- ID: 40
  text: parallel to throws
  formattingOptions: []
  position:
  - 4.10696022727273e+2
  - 6.46994318181818e+2
  width: 1e+2
  connections:
    indexes:
    - location: 5
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 41
  text: our "beware, this could take a while" sign
  formattingOptions: []
  position:
  - 5.27787642045454e+2
  - 8.09146306818186e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 5
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 42
  text: parallel to try
  formattingOptions: []
  position:
  - 6.94904119318182e+2
  - 4.89267045454549e+2
  width: 8e+1
  connections:
    indexes:
    - location: 6
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 43
  text: analogous to wrapping a try in a do block
  formattingOptions: []
  position:
  - 2.40807200611888e+2
  - 2.95893739073431e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 7
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 44
  text: inherits the actor context
  formattingOptions: []
  position:
  - 2.42301136363636e+2
  - 4.22647727272731e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 7
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 45
  text: operation closure implicitly captures self
  formattingOptions: []
  position:
  - 3.95699571136364e+2
  - 3.66767045454549e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 7
      length: 1
    - location: 46
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 46
  text: can specify a [weak self] for a detatched task
  formattingOptions: []
  position:
  - 3.72537423513986e+2
  - 3.13122760052451e+2
  width: 1.4e+2
  connections:
    indexes:
    - location: 45
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 47
  text: pollutes the calling chain until hitting a Task (marking methods blue)
  formattingOptions: []
  position:
  - 3.54463778409091e+2
  - 7.00172585227277e+2
  width: 1.4e+2
  connections:
    indexes:
    - location: 5
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 48
  text: reference semantics, like classes
  formattingOptions: []
  position:
  - 3.10964147180944e+3
  - 1.17107954545468e+2
  width: 1.9e+2
  connections:
    indexes:
    - location: 16
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 49
  text: All UI done on MainActor
  formattingOptions: []
  position:
  - 3.08149816979895e+3
  - 2.29007266171342e+2
  width: 9e+1
  connections:
    indexes:
    - location: 16
      length: 1
    - location: 50
      length: 1
    - location: 127
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 50
  text: '"using the main actor to manage access to the main thread"'
  formattingOptions: []
  position:
  - 3.05327728911713e+3
  - 2.78879425262251e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 49
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 51
  text: Mark ObservableObjets with @MainActor
  formattingOptions: []
  position:
  - 3.28343353911713e+3
  - 1.85569766171342e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 16
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 52
  text: To research
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 6.81629971590909e+2
  - 3.79034090909196e+1
  width: 1.6e+2
  connections:
    indexes:
    - location: 53
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 53
  text: what exactly is point-free, outside of passing a function instead of a closure
    to a swiftui button?
  formattingOptions: []
  position:
  - 7.68558238636364e+2
  - 7.4110795454556e+1
  width: 1.6e+2
  connections:
    indexes:
    - location: 52
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 54
  text: rules the universe
  formattingOptions: []
  position:
  - 5.51225142045454e+2
  - 1.08510653409101e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 2
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 55
  text: Task is broken into subunits - PartialAsyncTasks at each suspension point
    and at the completion of the task
  formattingOptions: []
  position:
  - 7.47265625e+1
  - 3.23780539772739e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 7
      length: 1
    - location: 56
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 56
  text: can think of a new one of these each time see an await
  formattingOptions: []
  position:
  - 4.15980113636363e+1
  - 2.52977982954556e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 55
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 57
  text: if we're inside an async methods, somewhere up the calltree we're being run
    in a Task
  formattingOptions: []
  position:
  - 8.02201704545454e+1
  - 4.41067471590919e+2
  width: 1.6e+2
  connections:
    indexes: []
  _effectiveHeight: 5.6e+1
- ID: 58
  text: if both exist, async comes first in the signature. "this is an async function
    that happens to throw"
  formattingOptions: []
  position:
  - 6.22769886363636e+2
  - 7.10414062500003e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 29
      length: 1
    - location: 59
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 59
  text: 'At the call site, it''s reversed, try await blah(), '
  formattingOptions: []
  position:
  - 7.28061079545454e+2
  - 8.06028409090905e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 58
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 60
  text: 'and computed propertes:

    the async has to be put on the _get_ block directly, not on the top-level. e.g.


    var blah: String { get async { ... } }'
  formattingOptions: []
  position:
  - 3.61164772727273e+2
  - 7.76688920454533e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 5
      length: 1
  _effectiveHeight: 9.8e+1
- ID: 61
  text: Stylishness
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 7.3902972027972e+1
  - 1.00652808129352e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 62
      length: 1
    - location: 192
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 62
  text: 'Put the await (as well as the try) as close as possible to the thing that
    needs it.  e.g.

    blah = oop + (await ack)'
  formattingOptions: []
  position:
  - 8.29138439685315e+1
  - 1.41076759178303e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 61
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 63
  text: Testing (XCTest)
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.75852272727273e+2
  - 4.81649857954527e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 4
      length: 1
    - location: 64
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 64
  text: tests can marked async, so they'll automatically be run in a Task context.
  formattingOptions: []
  position:
  - 2.18618607954545e+2
  - 5.19313210227254e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 63
      length: 1
    - location: 65
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 65
  text: 'lets us get rid of :alot: of the expectation / fulfil expectation / wait
    boilerplate.'
  formattingOptions: []
  position:
  - 3.48792613636363e+1
  - 5.28649147727254e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 64
      length: 1
    - location: 66
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 66
  text: though we lose setting a timeout on something that might take forever
  formattingOptions: []
  position:
  - 1.0234375e+1
  - 6.06575284090891e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 65
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 67
  text: Let's be careful out there
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.39314630681818e+2
  - 6.06799005681804e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 4
      length: 1
    - location: 68
      length: 1
    - location: 71
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 68
  text: in seemingly simple and "easy to read and understand" code, there's still
    a lot going on in a few lines
  formattingOptions: []
  position:
  - 5.64133522727272e+1
  - 6.68400568181809e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 67
      length: 1
    - location: 69
      length: 1
  _effectiveHeight: 7e+1
- ID: 69
  text: odd things can happen on opposite sides of a suspension point
  formattingOptions: []
  position:
  - 6.95703125e+1
  - 7.59366477272718e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 68
      length: 1
    - location: 70
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 70
  text: need to be careful that we know what to pack away to use later
  formattingOptions: []
  position:
  - 3.63955965909091e+1
  - 8.23908380681808e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 69
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 71
  text: When using tasks, we might get an unexpected order of returns
  formattingOptions: []
  position:
  - 2.365625e+2
  - 6.91422585227263e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 67
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 72
  text: ''
  formattingOptions: []
  position:
  - 1.03183284732845e+3
  - 1.74700015493538e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 73
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 73
  text: ''
  formattingOptions: []
  position:
  - 1.04573363404174e+3
  - 1.96949551114167e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 72
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 74
  text: 'reminder that

    - any mehod labeled async can be suspended

    - anytime you see await, you know that''s a possible suspension point'
  formattingOptions: []
  position:
  - 3.19469241695796e+2
  - 9.88175750297217e+2
  width: 1.9e+2
  connections:
    indexes:
    - location: 8
      length: 1
  _effectiveHeight: 7e+1
- ID: 75
  text: the part after the work that's being awaited
  formattingOptions: []
  position:
  - 1.25594951923066e+2
  - 1.23077873325176e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 76
  text: when we return from the method that we're awaiting, the next steps are the
    continuation
  formattingOptions: []
  position:
  - 1.58045236013976e+2
  - 1.28827305506994e+3
  width: 1.8e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 77
  text: can think of it as a proxy object that will be filled in later with the right
    value
  formattingOptions: []
  position:
  - 3.13727054195796e+2
  - 1.17890515734267e+3
  width: 1.4e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 78
  text: Checked Throwing Continuations
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.90179468968516e+2
  - 1.42825174825176e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 8
      length: 1
    - location: 88
      length: 3
  _effectiveHeight: 2.8e+1
- ID: 79
  text: generic with <T, Never>
  formattingOptions: []
  position:
  - 6.32995520104886e+2
  - 1.23886964597903e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 9
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 80
  text: MUST return exactly once
  formattingOptions: []
  position:
  - 2.97949355332156e+2
  - 1.2533142446154e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 81
  text: it hangs on to the calling function name so it can log it when errors happen
  formattingOptions: []
  position:
  - 8.7803758741248e+1
  - 1.11450174825176e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 82
  text: no problem returning Void or tuples
  formattingOptions: []
  position:
  - 6.7303048513975e+1
  - 1.1743582787063e+3
  width: 1.2e+2
  connections:
    indexes:
    - location: 19
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 83
  text: Unsafe Continuations
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 6.09504753059426e+2
  - 1.28181353802449e+3
  width: 1.3e+2
  connections:
    indexes:
    - location: 8
      length: 1
    - location: 84
      length: 2
    - location: 87
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 84
  text: Doesn't log if there's a continuation problem
  formattingOptions: []
  position:
  - 6.67796656468516e+2
  - 1.33573967075176e+3
  width: 1.3e+2
  connections:
    indexes:
    - location: 83
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 85
  text: Can get some unspeciied performance increase
  formattingOptions: []
  position:
  - 5.44174497377616e+2
  - 1.43590089597904e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 83
      length: 1
    - location: 86
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 86
  text: but yeah, you shouldn't use this
  formattingOptions: []
  position:
  - 6.30950065559426e+2
  - 1.49682419143358e+3
  width: 1.1e+2
  connections:
    indexes:
    - location: 85
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 87
  text: Dies at the top of the app if there's a double-resume
  formattingOptions: []
  position:
  - 6.29621940559426e+2
  - 1.38288598120631e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 83
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 88
  text: Adding a non-Never type to a continuation property makes it throwing
  formattingOptions: []
  position:
  - 1.70140406468516e+2
  - 1.36118853802449e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 78
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 89
  text: use withCheckedThrowingContinuation
  formattingOptions: []
  position:
  - 8.98385598776019e+1
  - 1.48439166302449e+3
  width: 2e+2
  connections:
    indexes:
    - location: 78
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 90
  text: resume(with:) takes a Result type (so we can avoid calling resume(throwing:)
    in a different code branch
  formattingOptions: []
  position:
  - 3.33482025786706e+2
  - 1.50261964597904e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 78
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 91
  text: 'await MainActor.run { ... }

    for running stuff on main thread'
  formattingOptions: []
  position:
  - 2.90497473229894e+3
  - 1.66308398898605e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 16
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 92
  text: Migrating from closures
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 4.49650349650326e+2
  - 1.59040728802449e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 8
      length: 1
    - location: 93
      length: 2
  _effectiveHeight: 1.4e+1
- ID: 93
  text: 'Strategy 1: modify the closure-based version to call the async version'
  formattingOptions: []
  position:
  - 3.41947934877596e+2
  - 1.63563811188813e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 92
      length: 1
    - location: 95
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 94
  text: 'Strategy 2:'
  formattingOptions: []
  position:
  - 5.33041684877596e+2
  - 1.63329436188813e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 92
      length: 1
    - location: 96
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 95
  text: "signatures of old closure-based and new async-based\n    func selectRandomNumber(with
    completion: \n             @escaping (Int, Bool) -> Void) {\n    \n    func randomNumber()
    async (Int, Bool) {\n"
  formattingOptions: []
  position:
  - 1.37892537150326e+2
  - 1.70494208916087e+3
  width: 3e+2
  connections:
    indexes:
    - location: 93
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 96
  text: wrap the closure based version in an async version
  formattingOptions: []
  position:
  - 5.49277480332136e+2
  - 1.6666288789336e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 94
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 97
  text: xcode has some refactorings
  formattingOptions: []
  position:
  - 5.06161358173066e+2
  - 1.2611505408654e+3
  width: 7e+1
  connections:
    indexes:
    - location: 8
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 98
  text: 'Concrete implementation of

    AsyncSequence'
  formattingOptions: []
  position:
  - 1.03502704326923e+3
  - 4.99242187500005e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 12
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 99
  text: can transform with filter and map
  formattingOptions: []
  position:
  - 9.8598257211538e+2
  - 2.73436899038467e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 11
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 100
  text: AsyncAlgorithms
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.3797626201923e+3
  - 2.15804687500005e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 101
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 101
  text: non-standard-library package of additional goodies
  formattingOptions: []
  position:
  - 1.39231670673077e+3
  - 1.51153245192313e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 100
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 102
  text: (NS)Notifications as one of the driving examples
  formattingOptions: []
  position:
  - 1.42235576923078e+3
  - 2.71637019230802e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 103
      length: 1
    - location: 116
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 103
  text: strategy for communicating asynchronously
  formattingOptions: []
  position:
  - 1.61234975961539e+3
  - 2.62042668269263e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 102
      length: 1
    - location: 104
      length: 2
  _effectiveHeight: 2.8e+1
- ID: 104
  text: unlike delegate, neither party knows aboot the other
  formattingOptions: []
  position:
  - 1.64515024038462e+3
  - 3.14743990384648e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 103
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 105
  text: '"hey, something happened, maybe here''s an informational payload'
  formattingOptions: []
  position:
  - 1.68560096153847e+3
  - 2.00402043269266e+2
  width: 1.5e+2
  connections:
    indexes:
    - location: 103
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 106
  text: because it can be zero, one, or many, it requires a different approach than
    seen in prior chapters
  formattingOptions: []
  position:
  - 1.42305889423078e+3
  - 3.49091947115419e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 107
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 107
  text: e.g. CheckedContinuation requires being resumed once and only once
  formattingOptions: []
  position:
  - 1.60792668269232e+3
  - 3.83863581730804e+2
  width: 1.9e+2
  connections:
    indexes:
    - location: 106
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 108
  text: requires a type of what it's async streaming
  formattingOptions: []
  position:
  - 1.01853966346154e+3
  - 5.51700120192343e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 12
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 109
  text: '"Picture it as a stream that gently flows by on a beautiful sunny day. Every
    once in a while an Int floats by on an innertube'
  formattingOptions: []
  position:
  - 1.02120192307693e+3
  - 6.19792067307727e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 12
      length: 1
  _effectiveHeight: 7e+1
- ID: 110
  text: to make a stored property, specify the type of elements, and a continuation(closure)
  formattingOptions: []
  position:
  - 1.1859795673077e+3
  - 5.98460937500035e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 12
      length: 1
    - location: 112
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 111
  text: AsyncStream.Continuation - designed to return zero, one, or more values
  formattingOptions: []
  position:
  - 1.1891796875e+3
  - 6.76958533653881e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 12
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 112
  text: continuation.yield(value) is what kicks off the innertube
  formattingOptions: []
  position:
  - 1.01494591346154e+3
  - 7.21682091346189e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 110
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 113
  text: A Sequence that can deliver values over time
  formattingOptions: []
  position:
  - 9.73765024038465e+2
  - 2.2302524038465e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 11
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 114
  text: for await blah in someSequence
  formattingOptions: []
  position:
  - 9.88203125000003e+2
  - 3.59260216346189e+2
  width: 1.8e+2
  connections:
    indexes:
    - location: 11
      length: 1
    - location: 115
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 115
  text: a great use is need to listen to changes to a subscription or something else
    that we need to kep alive the whole time the app is running
  formattingOptions: []
  position:
  - 9.88909254807695e+2
  - 3.97853966346189e+2
  width: 1.7e+2
  connections:
    indexes:
    - location: 114
      length: 1
  _effectiveHeight: 7e+1
- ID: 116
  text: notifications(), can think of as an AsyncSequence<Notification>
  formattingOptions: []
  position:
  - 1.59137319711539e+3
  - 1.58274639423112e+2
  width: 1.9e+2
  connections:
    indexes:
    - location: 102
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 117
  text: Non-sendable type 'Notification?' returned by implicitly asynchronous call
    to nonisolated function cannot cross actor boundary %-)
  formattingOptions: []
  position:
  - 1.56788161057692e+3
  - 5.37150841346188e+2
  width: 2e+2
  connections:
    indexes:
    - location: 121
      length: 1
    - location: 124
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 118
  text: "for in loop is equivalent to this\n\nlet ints = [0, 1, 2, 3, 4]\nvar iterator
    = ints.makeIterator()\nwhile let int = iterator.next() {\n    print(int)\n}"
  formattingOptions: []
  position:
  - 1.23216947115385e+3
  - 1.62584134615724e+1
  width: 1.9e+2
  connections:
    indexes:
    - location: 119
      length: 1
  _effectiveHeight: 9.8e+1
- ID: 119
  text: 'Much like Sequence:

    * specify Element type

    * has an AsyncIterator that defines async next() returning Element?'
  formattingOptions: []
  position:
  - 1.06470252403846e+3
  - 1.43034254807727e+2
  width: 1.9e+2
  connections:
    indexes:
    - location: 11
      length: 1
    - location: 118
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 120
  text: Sendable
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.49957632211538e+3
  - 7.81375600961571e+2
  width: 6e+1
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 131
      length: 2
    - location: 141
      length: 2
  _effectiveHeight: 1.4e+1
- ID: 121
  text: Main Actor
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.37323016826923e+3
  - 4.44584735576958e+2
  width: 7e+1
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 117
      length: 1
    - location: 122
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 122
  text: 'Can think of the main actor as the Cafe area where customers sit.

    Staff behave differently in front of customers than when are behind closed doors'
  formattingOptions: []
  position:
  - 1.46803786057693e+3
  - 4.51144230769266e+2
  width: 1.9e+2
  connections:
    indexes:
    - location: 121
      length: 1
    - location: 123
      length: 1
  _effectiveHeight: 7e+1
- ID: 123
  text: staff moves constantly between the two worlds
  formattingOptions: []
  position:
  - 1.69151141826923e+3
  - 4.59082932692342e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 122
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 124
  text: was caused by the loop being in a @MainActor, which is different from where
    the notificaitons originated from
  formattingOptions: []
  position:
  - 1.69902644230769e+3
  - 6.16135216346185e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 117
      length: 1
  _effectiveHeight: 7e+1
- ID: 125
  text: 'can do Task { @MainActor in

    to shunt to main actor'
  formattingOptions: []
  position:
  - 2.20288461538454e+2
  - 2.42246995192341e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 7
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 126
  text: '"the job of an actor is to resstrict access to shared mutable state"'
  formattingOptions: []
  position:
  - 3.285594951923e+3
  - 2.53830528846191e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 16
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 127
  text: await MainActor.run { }
  formattingOptions: []
  position:
  - 2.88700120192302e+3
  - 2.38076322115426e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 49
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 128
  text: isolation
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.95695312499996e+3
  - 8.98611778846569e+1
  width: 6e+1
  connections:
    indexes:
    - location: 16
      length: 1
    - location: 129
      length: 2
  _effectiveHeight: 1.4e+1
- ID: 129
  text: something isolated must run on the actor that it is connected to
  formattingOptions: []
  position:
  - 2.84001201923073e+3
  - 1.77337740385029e+1
  width: 1.6e+2
  connections:
    indexes:
    - location: 128
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 130
  text: something non-isolated can run on or off the actor, but doesn't have acess
    to the isolated parts of the actor without taking extra steps
  formattingOptions: []
  position:
  - 3.0358834134615e+3
  - 5.28185096157995e+0
  width: 1.6e+2
  connections:
    indexes:
    - location: 128
      length: 1
  _effectiveHeight: 7e+1
- ID: 131
  text: think in terms of let/var
  formattingOptions: []
  position:
  - 1.40311298076926e+3
  - 7.31528846153882e+2
  width: 8e+1
  connections:
    indexes:
    - location: 120
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 132
  text: A type is Sendable if it is safe for us to send a copy to a different concurrency
    world
  formattingOptions: []
  position:
  - 1.4802433894231e+3
  - 6.30528245192343e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 120
      length: 1
    - location: 133
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 133
  text: Notification isn't sendable b/c it's a reference type
  formattingOptions: []
  position:
  - 1.57730168269233e+3
  - 7.09281250000036e+2
  width: 1e+2
  connections:
    indexes:
    - location: 132
      length: 1
    - location: 134
      length: 2
  _effectiveHeight: 4.2e+1
- ID: 134
  text: and the info dictionary can have ANYTHING in it
  formattingOptions: []
  position:
  - 1.71829326923084e+3
  - 7.10110576923124e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 133
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 135
  text: Actors help out with the reference type problem
  formattingOptions: []
  position:
  - 1.57432391826931e+3
  - 7.75200721153896e+2
  width: 1.4e+2
  connections:
    indexes:
    - location: 133
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 136
  text: Actors are Sendable
  formattingOptions: []
  position:
  - 3.22710036057691e+3
  - 1.45104567307747e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 16
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 137
  text: 'a class can be sendable if it consists of immutable data.

    Though tricky if it has properties that are reference types'
  formattingOptions: []
  position:
  - 1.57530348557703e+3
  - 9.42126802884661e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 138
      length: 1
    - location: 141
      length: 1
  _effectiveHeight: 7e+1
- ID: 138
  text: immutable data all the way down
  formattingOptions: []
  position:
  - 1.64370192307703e+3
  - 8.44049879807738e+2
  width: 1e+2
  connections:
    indexes:
    - location: 137
      length: 1
    - location: 139
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 139
  text: guess that implies the turtles are immutable
  formattingOptions: []
  position:
  - 1.72277343750011e+3
  - 8.90687500000046e+2
  width: 1.3e+2
  connections:
    indexes:
    - location: 138
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 140
  text: a class can also be sedable if access to its internal state is synchronized
    (queues/locks/etc)
  formattingOptions: []
  position:
  - 1.44047475961549e+3
  - 8.70149639423123e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 141
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 141
  text: classes
  fillColorRGB:
    red: 8.93993e-1
    green: 9.92872e-1
    blue: 1e+0
  formattingOptions: []
  position:
  - 1.56841947115395e+3
  - 8.31952524038507e+2
  width: 5e+1
  connections:
    indexes:
    - location: 120
      length: 1
    - location: 137
      length: 1
    - location: 140
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 142
  text: structs
  fillColorRGB:
    red: 8.93993e-1
    green: 9.92872e-1
    blue: 1e+0
  formattingOptions: []
  position:
  - 1.39457932692318e+3
  - 8.117602163462e+2
  width: 5e+1
  connections:
    indexes:
    - location: 120
      length: 1
    - location: 143
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 143
  text: structs must only have Sendable members and associated values
  formattingOptions: []
  position:
  - 1.19646033653862e+3
  - 7.96973557692376e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 142
      length: 1
    - location: 144
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 144
  text: containing value types helps satisfy this
  formattingOptions: []
  position:
  - 1.03941706730785e+3
  - 7.9347596153853e+2
  width: 1.3e+2
  connections:
    indexes:
    - location: 143
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 145
  text: transforming AsyncSequences
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.23059795673095e+3
  - 9.05053485576997e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 10
      length: 1
    - location: 146
      length: 2
  _effectiveHeight: 2.8e+1
- ID: 146
  text: transforms (e.g. map, filter) on Sequences preserve the fundamental sequence
    type. Starts as an Array<SomeType> ends as an Array<PossiblyAnotherType>
  formattingOptions: []
  position:
  - 9.87842548077128e+2
  - 8.63500000000076e+2
  width: 1.8e+2
  connections:
    indexes:
    - location: 145
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 147
  text: there are methods like (compact)map, filter, etc on AsyncSequences
  formattingOptions:
  - options: 1
    rangeStart: 6
    rangeLength: 3
  position:
  - 1.18183077298701e+3
  - 9.71317007211625e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 145
      length: 1
    - location: 148
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 148
  text: but behave more like the Combine(RIP) counterparts by mutating in stages,
    creating a cascadingly complex set of nested types
  formattingOptions: []
  position:
  - 9.98205707256838e+2
  - 9.84623704176769e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 147
      length: 1
    - location: 150
      length: 1
  _effectiveHeight: 7e+1
- ID: 149
  text: Taking our own values and putting them into an AsyncStream, consumable in
    a for await in loop
  formattingOptions: []
  position:
  - 1.67193878173851e+3
  - 1.05182204965453e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 162
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 150
  text: Speaking of Combine...
  fillColorRGB:
    red: 8.93993e-1
    green: 9.92872e-1
    blue: 1e+0
  formattingOptions: []
  position:
  - 1.1685246394233e+3
  - 1.07321153846162e+3
  width: 7e+1
  connections:
    indexes:
    - location: 148
      length: 1
    - location: 151
      length: 2
    - location: 166
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 151
  text: 'With @Published var count = 0


    (e.g.) $count is a publisher.  Every time count changes, $count (the publisher
    associated with count) will publish its value if anyone is listening.  Also, first-time-callers
    get the existing value'
  formattingOptions: []
  position:
  - 9.88864182692542e+2
  - 1.12762860576932e+3
  width: 1.9e+2
  connections:
    indexes:
    - location: 150
      length: 1
  _effectiveHeight: 1.12e+2
- ID: 152
  text: 'convert a combine publisher to an async sequence using .values

    e.g.

    IntPublisher.share.$count.values'
  formattingOptions: []
  position:
  - 1.2029142409107e+3
  - 1.1750099628156e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 150
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 153
  text: Async Algorithms
  fillColorRGB:
    red: 1e+0
    green: 9.0283e-1
    blue: 9.76506e-1
  formattingOptions: []
  position:
  - 1.45336510291491e+3
  - 1.59778950383129e+3
  width: 1.1e+2
  connections:
    indexes:
    - location: 172
      length: 4
    - location: 177
      length: 1
    - location: 179
      length: 3
  _effectiveHeight: 1.4e+1
- ID: 154
  text: Making a custom async sequence
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.02036991999734e+3
  - 1.30612446476883e+3
  width: 1.2e+2
  connections:
    indexes:
    - location: 155
      length: 2
  _effectiveHeight: 2.8e+1
- ID: 155
  text: kinda gnarly
  formattingOptions: []
  position:
  - 1.01337564321699e+3
  - 1.27266574331451e+3
  width: 8e+1
  connections:
    indexes:
    - location: 154
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 156
  text: adopt AsyncSequence protocol
  formattingOptions: []
  position:
  - 1.00790769136903e+3
  - 1.36416354604889e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 154
      length: 1
    - location: 157
      length: 2
  _effectiveHeight: 2.8e+1
- ID: 157
  text: typealias Element = Blah
  formattingOptions: []
  position:
  - 9.50467623197457e+2
  - 1.42641574331451e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 156
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 158
  text: func makeAsyncIterator() -> TheIteratorType
  formattingOptions: []
  position:
  - 1.1237743201626e+3
  - 1.42574595289985e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 156
      length: 1
    - location: 159
      length: 2
  _effectiveHeight: 2.8e+1
- ID: 159
  text: AsyncSequence doesn't type erase the return type (so it exposes all sorts
    of implementation details.  yay).  That's what we need to return
  formattingOptions: []
  position:
  - 9.7717956543003e+2
  - 1.47834863281271e+3
  width: 1.8e+2
  connections:
    indexes:
    - location: 158
      length: 1
    - location: 161
      length: 1
  _effectiveHeight: 7e+1
- ID: 160
  text: make a typealias of the oogly type and use that as TheIteratorType
  formattingOptions: []
  position:
  - 1.20615440955566e+3
  - 1.35335666128326e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 158
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 161
  text: Can figure out the type by assigning to a temp, then querying in the editor
    for the type. Copy and paste that. And hope you never have to edit the pipeline
  formattingOptions: []
  position:
  - 9.86781522311067e+2
  - 1.56676045109696e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 159
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 162
  text: Async (Throwing) Stream Continuations
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 1.68138822115423e+3
  - 1.20020072115401e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 149
      length: 1
    - location: 163
      length: 3
    - location: 170
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 163
  text: there's an .inTermination closure can set to know when the stream ends
  formattingOptions: []
  position:
  - 1.4792848557697e+3
  - 1.0868293269233e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 162
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 164
  text: "private var continuation: AsyncStream<Entry>.Continuation?\n\nlazy private(set)
    var entries =\nAsyncStream(Entry.self) { continuation in\n    self.continuation
    = continuation\n}\n\n// publish with\ncontinuation?.yield(Entry(number: count))\n"
  formattingOptions: []
  position:
  - 1.40999399038509e+3
  - 1.15472295673099e+3
  width: 2.3e+2
  connections:
    indexes:
    - location: 162
      length: 1
  _effectiveHeight: 1.54e+2
- ID: 165
  text: Can be terminated from the consuming end or the producing end
  formattingOptions: []
  position:
  - 1.69247596153893e+3
  - 1.24342487980792e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 162
      length: 1
    - location: 167
      length: 3
  _effectiveHeight: 4.2e+1
- ID: 166
  text: Unlike Comebine, can't really have the same AsyncSequence appearing in two
    for await in loops
  formattingOptions: []
  position:
  - 1.26522836538509e+3
  - 1.04385156250022e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 150
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 167
  text: know via .onTermination on the continuation
  formattingOptions: []
  position:
  - 1.72066105769278e+3
  - 1.31268569711562e+3
  width: 1.4e+2
  connections:
    indexes:
    - location: 165
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 168
  text: breaking out of the for async in loop does not trigger
  formattingOptions: []
  position:
  - 1.67347956730817e+3
  - 1.36979807692331e+3
  width: 1.3e+2
  connections:
    indexes:
    - location: 165
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 169
  text: explicitly doing finish() on the continuation does
  formattingOptions: []
  position:
  - 1.71905949519279e+3
  - 1.44366225961562e+3
  width: 1.4e+2
  connections:
    indexes:
    - location: 165
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 170
  text: callig finish() on the continuation causes the iterator next() value to retur
    nil, and so break out of the for async in loop
  formattingOptions: []
  position:
  - 1.48185096153898e+3
  - 1.34723197115414e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 162
      length: 1
  _effectiveHeight: 7e+1
- ID: 171
  text: 'Unstructured Concurrency: spinning up a bunch of tasks'
  formattingOptions: []
  position:
  - 2.05726862980823e+3
  - 4.22950721156613e+1
  width: 1.6e+2
  connections:
    indexes:
    - location: 13
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 172
  text: Standard Library has some of the usual toys (dropFirst, map, filter, etc),
    but not things like debounce/throttle which can be really useful for time-oriented
    streams
  formattingOptions: []
  position:
  - 1.24750000000061e+3
  - 1.53679326923107e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 153
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 173
  text: 'AsyncAlgorithms has things like

    time: debounce, throttle

    combining: zip, merge, cobineLatest

    utilties: compacted, removeDuplicates, interspersed'
  formattingOptions: []
  position:
  - 1.36323617788523e+3
  - 1.46147776442338e+3
  width: 2.9e+2
  connections:
    indexes:
    - location: 153
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 174
  text: AsyncTimerSequence - fires after a specified duration
  formattingOptions:
  - options: 1
    rangeStart: 0
    rangeLength: 18
  position:
  - 1.23029747596219e+3
  - 1.64678125000031e+3
  width: 1.8e+2
  connections:
    indexes:
    - location: 153
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 175
  text: merge - two sequences with the same type, combined into a single sequence
  formattingOptions:
  - options: 1
    rangeStart: 0
    rangeLength: 5
  position:
  - 1.31137319711604e+3
  - 1.69730408653877e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 153
      length: 1
    - location: 176
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 176
  text: result of merge is AsyncMerge2Sequence (two streams) or AsyncMerg3Sequence
    (three streams)
  formattingOptions: []
  position:
  - 1.25729567307758e+3
  - 1.76831069711569e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 175
      length: 1
  _effectiveHeight: 7e+1
- ID: 177
  text: 'Throttle: adjust the rate elements are being emitted by a sequence'
  formattingOptions:
  - options: 1
    rangeStart: 0
    rangeLength: 10
  position:
  - 1.46533954326989e+3
  - 1.77377043269262e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 153
      length: 1
    - location: 178
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 178
  text: '"hey, I need two seconds to recover from the previous stream value" - extra
    ones generated in the mean time are dropped on the floor, only keeping the last
    one'
  formattingOptions: []
  position:
  - 1.42933593750066e+3
  - 1.86445552884646e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 177
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 179
  text: zip - pairs up elements in two sequences.  one sequence may have to wait on
    the other to emit its value
  formattingOptions:
  - options: 1
    rangeStart: 0
    rangeLength: 3
  position:
  - 1.54478365384681e+3
  - 1.67444651442339e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 153
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 180
  text: combineLatest - whenever one of the streams has a new value, emit both values
  formattingOptions:
  - options: 1
    rangeStart: 0
    rangeLength: 13
  position:
  - 1.58363281250072e+3
  - 1.53965084134651e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 153
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 181
  text: sensitive to the current Swift toolchain
  formattingOptions: []
  position:
  - 1.58915564903918e+3
  - 1.6122319711542e+3
  width: 1.6e+2
  connections:
    indexes:
    - location: 153
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 182
  text: Wanting to have more control over Tasks and may want to coordinate them
  formattingOptions: []
  position:
  - 1.91096454327013e+3
  - 1.44049879808049e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 13
      length: 1
    - location: 185
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 183
  text: TaskGroups
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.2250450721163e+3
  - 6.33073317308051e+2
  width: 8e+1
  connections:
    indexes:
    - location: 13
      length: 1
    - location: 26
      length: 2
    - location: 184
      length: 1
    - location: 212
      length: 1
    - location: 215
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 184
  text: work with many asychronous calls and handle each as it is completed
  formattingOptions: []
  position:
  - 2.26673978365477e+3
  - 5.34197115384982e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 183
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 185
  text: say, go off and do this and that async work, and do more code until we hit
    a point where we need that async work
  formattingOptions: []
  position:
  - 1.95038762019323e+3
  - 2.04635817308059e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 182
      length: 1
  _effectiveHeight: 7e+1
- ID: 186
  text: "essentially putting the async on the assignment.\n    async let plainNumber
    = plain.randomNumber()\n\n(from\n    plainNumber = await plain.randomNumber())"
  formattingOptions: []
  position:
  - 2.25016826923169e+3
  - 4.31935096157511e+1
  width: 3.1e+2
  connections:
    indexes:
    - location: 14
      length: 1
    - location: 187
      length: 1
  _effectiveHeight: 7e+1
- ID: 187
  text: anything using plainNumber must be prepared to wait (with explicit await instructions)
  formattingOptions: []
  position:
  - 2.57641526442398e+3
  - 3.1952524038828e+1
  width: 1.7e+2
  connections:
    indexes:
    - location: 186
      length: 1
    - location: 188
      length: 1
    - location: 191
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 188
  text: every use.
  formattingOptions: []
  position:
  - 2.59181189903935e+3
  - 9.86832932695856e+1
  width: 7e+1
  connections:
    indexes:
    - location: 187
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 189
  text: says to create a new Task that is a child of our current Task
  formattingOptions: []
  position:
  - 2.34189603365474e+3
  - 2.1200961538497e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 14
      length: 1
    - location: 190
      length: 1
    - location: 193
      length: 1
    - location: 210
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 190
  text: Tasks are generic over value and error.  So the type of the generated task
    matches the assignment
  formattingOptions: []
  position:
  - 2.43737379807781e+3
  - 2.84545673077278e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 189
      length: 1
  _effectiveHeight: 5.6e+1
- ID: 191
  text: "can factor the await out, from\n    Comparison(await plainNumber, await filledNumber)\n\nto
    \n    await Comparison(plainNumber, filledNumber)"
  formattingOptions: []
  position:
  - 2.51883713942397e+3
  - 1.36964543269586e+2
  width: 3e+2
  connections:
    indexes:
    - location: 187
      length: 1
  _effectiveHeight: 7e+1
- ID: 192
  text: 'prever the un-factored await - e.g.

    Comparison(await plainNumber, await filledNumber)'
  formattingOptions: []
  position:
  - 1.13311298085945e+1
  - 3.78719951926729e+1
  width: 2.9e+2
  connections:
    indexes:
    - location: 61
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 193
  text: the child task inherits the priority and context of its parent
  formattingOptions: []
  position:
  - 2.29567608173166e+3
  - 2.73746394231139e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 189
      length: 1
    - location: 194
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 194
  text: a parent task can only complete if all its children complete
  formattingOptions: []
  position:
  - 2.36291466346242e+3
  - 3.82421274038838e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 193
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 195
  text: Cancellation
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.12111778846244e+3
  - 2.81718149038855e+2
  width: 8e+1
  connections:
    indexes:
    - location: 13
      length: 1
    - location: 196
      length: 2
    - location: 200
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 196
  text: cancel a Task<T,Error> with cancel()
  formattingOptions: []
  position:
  - 2.19213341346244e+3
  - 3.51366586538855e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 195
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 197
  text: does not kill a task
  formattingOptions: []
  position:
  - 2.02538161057783e+3
  - 3.75278846154239e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 195
      length: 1
    - location: 198
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 198
  text: the task needs to check if it's been cancelled, then dealloc and unwind stuff
  formattingOptions: []
  position:
  - 1.92098858173167e+3
  - 4.17168870192701e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 197
      length: 1
    - location: 199
      length: 1
    - location: 201
      length: 2
  _effectiveHeight: 4.2e+1
- ID: 199
  text: general cancellation is hard, mmmmkay?
  formattingOptions: []
  position:
  - 2.10540865384706e+3
  - 4.11102163461933e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 198
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 200
  text: cancelling a parent implicitly cancels the children as well
  formattingOptions: []
  position:
  - 1.93305588942398e+3
  - 3.16468750000394e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 195
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 201
  text: Task.sleep returns immediately when cancelled
  formattingOptions: []
  position:
  - 2.11548076923168e+3
  - 4.70182692308086e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 198
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 202
  text: Check with Task.isCancelled
  formattingOptions: []
  position:
  - 1.91954927884706e+3
  - 4.93917668269627e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 198
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 203
  text: with throwing, the try is not put on the async let, instead on the use of
    the variable
  formattingOptions: []
  position:
  - 2.61103966346243e+3
  - 2.22592548077319e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 14
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 204
  text: Tasks can return values
  fillColorRGB:
    red: 8.96043e-1
    green: 9.97437e-1
    blue: 9.42763e-1
  formattingOptions: []
  position:
  - 2.56032451923168e+3
  - 5.18460937500404e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 13
      length: 1
    - location: 205
      length: 1
    - location: 208
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 205
  text: 'Task specifies return and error types:

    Task<Success, Failure>'
  formattingOptions: []
  position:
  - 2.45143028846244e+3
  - 5.99527644231175e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 204
      length: 1
    - location: 206
      length: 2
  _effectiveHeight: 4.2e+1
- ID: 206
  text: looks familiar - Result or Publisher type
  formattingOptions: []
  position:
  - 2.63490384615474e+3
  - 5.69554687500406e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 205
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 207
  text: Success CONFORMS to Sendable, Failure to Error
  formattingOptions: []
  position:
  - 2.38955528846244e+3
  - 5.2987319711579e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 205
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 208
  text: "func taskExample() async {\n    let task = Task {\n        return 5\n    }\n
    \   print(await task.value)\n}"
  formattingOptions: []
  position:
  - 2.60096895658143e+3
  - 4.02082974947822e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 204
      length: 1
    - location: 209
      length: 1
  _effectiveHeight: 8.4e+1
- ID: 209
  text: Task<Int, Never>
  formattingOptions: []
  position:
  - 2.65114586463431e+3
  - 3.52936598558098e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 208
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 210
  text: just plain Task inside a task does not create child tasks
  formattingOptions: []
  position:
  - 2.47645132211628e+3
  - 2.22799879808094e+2
  width: 1.2e+2
  connections:
    indexes:
    - location: 189
      length: 1
  _effectiveHeight: 4.2e+1
- ID: 211
  text: great for small number of tasks, known order of use
  formattingOptions: []
  position:
  - 2.61791165865472e+3
  - 2.94254206731171e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 14
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 212
  text: make withTaskGroup() or withThrowingTaskGroup()
  formattingOptions: []
  position:
  - 2.10181490384706e+3
  - 6.92962139423465e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 183
      length: 1
    - location: 213
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 213
  text: give it a closure to provide the tasks involved
  formattingOptions: []
  position:
  - 1.92880408653936e+3
  - 6.94341346154234e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 212
      length: 1
    - location: 214
      length: 1
  _effectiveHeight: 2.8e+1
- ID: 214
  text: then do group.addTask { ... }
  formattingOptions: []
  position:
  - 1.93174879807783e+3
  - 7.61745192308081e+2
  width: 1.6e+2
  connections:
    indexes:
    - location: 213
      length: 1
  _effectiveHeight: 1.4e+1
- ID: 215
  text: They are also AsyncSequences
  formattingOptions: []
  position:
  - 2.3230679086548e+3
  - 6.55912860577291e+2
  width: 1.1e+2
  connections:
    indexes:
    - location: 183
      length: 1
  _effectiveHeight: 2.8e+1
