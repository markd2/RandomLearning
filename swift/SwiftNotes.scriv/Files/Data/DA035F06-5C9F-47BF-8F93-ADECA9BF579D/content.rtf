{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs36 \cf0 ## Compiler knows things\
\
If the compiler has no other recourse, it'll use existential containers:\
\
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\li720\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 func blah2(snorgles: [any Snorgle]) \{\
    print("  size: \\(MemoryLayout<any Snorgle>.size)")\
    print("  stride: \\(MemoryLayout<any Snorgle>.stride)")\
    print("  alignment: \\(MemoryLayout<any Snorgle>.alignment)")\
\}\
blah2(snorgles: [thing1, thing2])\
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \
which prints out the existential container size. But notice we can pass any kind of snorgle in there.\
\
Because generics are known at compile time:\
\
func blahArray<T: Snorgle>(snorgles: [T]) \{\
    print("  size: \\(MemoryLayout<T>.size)")\
    print("  stride: \\(MemoryLayout<T>.stride)")\
    print("  alignment: \\(MemoryLayout<T>.alignment)")\
\}\
\
can call with a uniform type\
blahArray(snorgles: [thing1])\
blahArray(snorgles: [thing2])\
\
and the actual sizes are known (so no dispatching through an existential container)\
}