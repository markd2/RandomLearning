{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Bold;\f1\froman\fcharset0 Palatino-Roman;\f2\fnil\fcharset0 Menlo-Regular;
\f3\froman\fcharset0 Palatino-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 Always skip tests
\f1\b0 \

\f2 @Test("Food truck sells burritos", .disabled("optional comment"))\
func sellsBurritos() async throws \{ ... \}\

\f1 \

\f0\b Require non-nil result / unwrap for rest of test
\f1\b0 \

\f2 let customer = try #require(Customer(id: 123))\

\f1 If you forget the try, you'll get an error that has no error marker in the editor #ilyxc
\f2 \

\f1 \

\f0\b Don't kill the test if something throws
\f1\b0 \

\f2 #expect(throws: Never.self) \{ // if it throws, record an error, but don't kill the test\
  try order.add(topping: .caper, toPizzasIn: 0..<1)\
\}\

\f1 \

\f0\b Expecting a particular error\

\f2\b0 #expect(throws: (any Error).self) \{ try ... \} // or an error type\

\f1 \

\f0\b Conditionally enable a test
\f1\b0 \

\f2 @Test("Ice cream is cold", .enabled(if: Season.current == .summer))\
func isCold() async throws \{ ... \}\

\f1 \

\f0\b Chaining multiple conditions
\f1\b0 \

\f2 @Test(\
  "Ice cream is cold",\
  .enabled(if: Season.current == .summer),\
  .disabled("We ran out of sprinkles")\
)\
func isCold() async throws \{ ... \}
\f1 \
\

\f0\b Adding a bug ID
\f1\b0 \

\f2 @Test(\
  "Ice cream is cold",\
  .bug(id: "12345")\
)\
func isCold() async throws \{ ... \}\

\f1 \
Limit test running\

\f2 @Test(.timeLimit(.minutes(60))
\f1 \
\
Attach a bug id (can also include a url)\

\f2 @Test(\
  "Food truck has napkins",\
  .bug(id: "12345 or numeric value", "optional description")\
)\
func hasNapkins() async \{\

\f1 \

\f0\b Making a custom description for test output\
\pard\pardeftab720\partightenfactor0

\f2\b0 \cf0 struct SoftServe: CustomTestStringConvertible \{\
	var testDescription: String \{\
		"\\(flavor) in a \\(container)"\
	\}\
\}\
\pard\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0

\f1 \cf0 \

\f0\b Iterative tests\

\f2\b0 @Test(arguments: 0 ..< 10)\
func createBubbleChoosesID(count: Int) \{\

\f1 \

\f0\b Are we running in tests?
\f1\b0  
\f3\i (not 100% sure this is the best way. Only tested on Mac so far)
\f1\i0 \

\f2 let inTests = ProcessInfo().environment["XCTestBundlePath"] != nil\
if !inTests \{        \

\f1 \

\f0\b Serializing tests
\f1\b0  
\f3\i (handy during debugging argument tests)
\f1\i0 \

\f2 @Test(.serialized) func blah() \{
\f1 \
\
\
sdjfnsdjf\
\
\
\
}