{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\froman\fcharset0 Palatino-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs36 \cf0 ## Arrays part 2.  Moo\
\
So, if you remember arrays part 1, you know that array storage is a linear chunk of stuff with the array contents laid end to end (using the _stride_ of the struct). This brings up a couple of interesting questions.\
\
axiom #1: Arrays are value types . Structs are passed by copy. Copying a million element array, is kind of expensive. \
\
So arrays are implemented as a struct (yay value type), which wraps an object (yay reference type).  \
\
The array points to its backing store.  If you pass the array around, 
\f1\b small
\f0\b0  structs get peeled off, but all referencing the same dingus\
\
(illustration)\
\
if someone modifies the array, it'll make a copy(*) first, and then modify that. "Copy on Write". So the expensive operation is paid by the one who is doing the copying.\
\
\
}