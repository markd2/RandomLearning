{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs32 \cf0 In Swift-land, iterator interface is verboten.\
protocols like CxxRandomAccessCollection / CxxConvertibleToCollection /CxxDictionary\
can explicitly convert a container to an array (from anything iterable) or a dictionary (for anything mappable)\
\
\
\
raw notes:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs30 \cf2 \CocoaLigature0  - Recommend approach\
    - use for-in syntax (for RandomAccessCollection)\
    - use collection APIs (map/filer) (for same)\
    - use the subscript operator to access a specific elelemnt (for same)\
    - convert other sequential containers to swift collections if you'd\
      like to traverse their elements\
    - use the subscript operator from CxxDictionary protocol when looking\
      up values in na associative container\
  - ~COMPLIANCE~ PERFORMANCE\
    - the current swift for-in makes a deep copy when traversing\
    - can avoid by using forEach by CxxConvertibleToCollection protocol\
  - Beast Practices\
    - do not use C++ iterators in swift\
    - use protocols like CxxRandomAccessCollection and CxxConvertibleToCollecti\\\
on and CxxDictionary\
    - member functions in container types that return C++ iterators are marked\
      unsafe (just like member functions that return references).\
    - other top-level functiions that take or return iterators could be availab\\\
le,\
      but avoid them.\
    - Borrow containers when calling Swift Functions\
      - they become value types in Swift, using the copy constructor\
      - swift's upcoming(?) Parameter Ownership Modifiers will let you avoid co\\\
pes when passing immutable values to functions\
        - https://github.com/apple/swift-evolution/blob/main/proposals/0377-par\\\
ameter-ownership-modifiers.md\
        - supposedly implemented in swift 5.9\
      - mutable values can be passed by inout, which avoids doing a deep copy o\\\
f the C++ container
\f0\fs32 \cf0 \CocoaLigature1 \
}