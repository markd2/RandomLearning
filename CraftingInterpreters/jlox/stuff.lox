
if (1 == 2) {
  print "one!";
} else {
  print "two!!";
}

print "hi" or 3;
print nil or "yes";

var a = 10;

while (a > 0) {
    print a;
    a = a - 1;
}

for (var x = 0; x < 20; x = x + 1) {
  print x;
}

var a = 0;
var temp;


for (var b = 1; a < 10000; b = temp + b) {
  print a;
   temp = a;
  a = b;
}

var start = clock();

for (var c = 1; c < 1000000; c = c + 1) {
}

var end = clock();

print "elapsed";
print end - start;

fun count(n) {
    if (n > 1) count(n - 1);
    print n;
}

count(5);

print count;

fun sayHi(first, last) {
    print "Hi, " + first + " " + last + "!";
}

sayHi("Splunge", "Bork");

fun oop() {
    fun ack() {
      print "hi";
    }
    ack();
}

oop();


fun fib(n) {
    if (n <= 1) return n;
    return fib(n-2) + fib(n-1);
}

// really starts slowing around i = 29
for (var i = 0; i < 28; i = i + 1) {
    print fib(i);
}

fun makeCounter() {
    var i = 0;
    fun count() {
        i = i + 1;
        print i;
    }

    return count;
}

var counter = makeCounter();
counter();
counter();
print "---";
var aaa = "global";
{
    fun showA() { print aaa; }

    showA();
    var aaa = "block";
    showA();
}

//fun bad() {
//    var a = "oop";
//    var a = "ack";
//    print a;
//}

// return "hello";

class Breakfast {
    cook() {
        print "Eggs a-frying";
    }

    serve(whom) {
        print "enjoy your aigs " + whom + ".";
    }
}

print Breakfast;

class Bagel { }
var bagel = Bagel();
print bagel;
bagel.splunge = "hello";

print bagel.splunge;

class Bacon {
    eat() {
        print "nom nom nom";
    }
}

Bacon().eat();

class Cake {
    taste() {
        var adjective = "deelishious";
        print "The " + this.flavor + " cake is " + adjective + "!";
    }
    init() {
        this.flavor = "Almighty";
    }   
}

var cake = Cake();
// cake.flavor = "Almighty";
cake.taste();


class AA {
    method() {
       print("AA method");
    }     
}


class BB < AA {
    method() {
       print("BB method");
    }     
    test() {
        super.method();
    }     
}

class CC < BB {}

CC().test();
CC().method();



