{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Palatino-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Take Off Every "ZIG" for Grace Justice!\
\
\
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://ziglang.org"}}{\fldrslt \cf0 ziglang.org}}\
\pard\tx0\tx360\tx720\tx1080\tx1440\tx1800\tx2160\tx2880\tx3600\tx4320\sl264\slmult1\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/ratfactor/ziglings"}}{\fldrslt \cf0 https://github.com/ratfactor/ziglings}}\
\
* Baking data into executables is super simple\
* Using a C library easier than in C (no need to muck around with makefiles - just build.zig)\
\
* Simplicity\
* can cross-compile c/c++/objc, includes runtime linkages so can cross-compile (say on mac and cross-compile to a specific linux)\
* beat clang for linking apple silicon\
* zig build to replace make/cmake/etc\
* all in a 40 meg dependency-free tarball\
* Complete bidirectional C ABI compatibility\
 \
"try zig for a couple of days, then try Rust for a couple of weeks, and see what you prefer"\
\
The emitted code can dump out stack traces.\
\
Exists bindings to Tracy. {\field{\*\fldinst{HYPERLINK "https://github.com/ziglang/zig/blob/0.10.0/src/tracy.zig"}}{\fldrslt https://github.com/ziglang/zig/blob/0.10.0/src/tracy.zig}}\
\
"Short edit/compile/test cycles are a debugging accessibility tool" - "one of our biggest priorities in Zig"\
\
Zig focuses more on correctness, Rust focuses on memory safety.\
\
from "WTF is Build.zig":\
Not only a language, but it's a toolchain for maintaining robust, optimal, and reusable software.\
\
Conference is called "Software you can love"\
\
young idealistic team\
\
most admired #3 (actual popularity between fortran and prolog at 0.7%) -\
\
no hidden control flow (no @property functions, no operator overloading, no exception handling)\
no hidden memory allocation (need an allocator. no closures or other FP goodies. not considered a safe language - it's a safe-ER function)\
	- can see if a function takes an allocator, so you can infer some stuff about memory allocation behavior.\
no preprocessor or macros (comptime and builtins do that)\
\
same toolchain for all supported targets - just one tool to download\
\
the build system is crazy (grpc. and uber)\
}